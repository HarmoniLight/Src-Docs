{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HarmoniLight Documentation","text":"<p>This project is licensed under the GNU GPL3 license View it here. </p>"},{"location":"ShowRunner/","title":"Home","text":"<p>HarmoniLight Showrunner is the main point of operation for the HarmoniLight system. In this section you will find the UserManual for how to make efficient use of the program to achieve the outcome you desire.</p>"},{"location":"ShowRunner/UserManual/","title":"User Manual","text":""},{"location":"ShowRunner/Setup/Console/","title":"Setting up with the Console","text":""},{"location":"ShowRunner/Setup/Gui/","title":"Setting up with the GUI","text":""},{"location":"ShowRunner/Usage/Console/","title":"Using the Console","text":"<p>The console comes with a CLI which allows you to interact with the underlying interface class of the program to directly communicate with the controller.</p> <p>Note</p> <p>The Show Runner Console is not as user friendly as the GUI. If you are new to the system, it is advised that you learn how to use the GUI first before learning to use the CLI.</p>"},{"location":"ShowRunner/Usage/Console/#commands","title":"Commands","text":"<p>Info</p> <p>Please be aware that the documentation is still being worked on. There may be missing commands in this list, or there may be commands without usage examples or descriptions.</p> <p>This section of the manual will explain how to use every command that is included in the ShowRunner Console.</p> ID Prefix Full Name Description 1 h Help Displays a help message with all the commands available 2 discover Discover This command sends the discover message to the controller. The controller then moves into <code>mode 2</code> to discover all receivers 3 set Set Sets the specified range of receivers to the specified value 4 on On Set all receivers to brightness 255 5 off Off Set all receivers to brightness 0 6 quit Quit This command safely exits the console interface. It saves the current date/time for app logging and safely closes the serial connection with the controller"},{"location":"ShowRunner/Usage/Console/#list","title":"List","text":""},{"location":"ShowRunner/Usage/Console/#help","title":"Help","text":"<p>The <code>help</code> command displays the generated table of documentation for all available commands. This table is generated via the <code>_doc</code> variable in each command. The table displays the <code>prefix</code> and <code>description</code> of each command. </p>"},{"location":"ShowRunner/Usage/Console/#discover","title":"Discover","text":"<p>This command is responsible for implementing <code>Controller Mode 2</code> (See Here For Details)</p> <p>The controller will discover all receivers which are turned on and listening for discovery. When a device is discovered, you will be shown the <code>Controller ID</code>(CID) of the receiver. </p>"},{"location":"ShowRunner/Usage/Console/#set","title":"Set","text":"<p>The set command is your main way of manipulating the lights of the receivers. There are multiple ways to interact with the <code>Set</code> command. </p>"},{"location":"ShowRunner/Usage/Console/#method-1-target-multiple-receivers","title":"Method 1 - Target multiple receivers","text":"<p>The first way to use the <code>Set</code> command is to set a range of CID values.  This can be performed as shown below <pre><code>set &lt;CID_START&gt; THRU &lt;CID_END&gt; @ &lt;BRIGHTNESS&gt;\n</code></pre></p> <p>Let's break this down.</p> <p><code>set</code>: Tell the console that we want to run the <code>Set</code> command. <code>&lt;CID_START&gt;</code>: This is the CID of the first receiver you want to target. <code>THRU</code>: Tell the command parser that you want to target every CID in the range from the CID on the left, to the CID on the right <code>&lt;CID_END&gt;</code>: This is the CID of the last receiver you want to target. <code>@</code>: Tell the command parser that the next value is the brightness you want <code>&lt;BRIGHTNESS&gt;</code>: The brightness you want the targetted receivers to be set to. This must be an integer between 0 and 255.</p>"},{"location":"ShowRunner/Usage/Console/#method-2-target-one-receiver","title":"Method 2 - Target one receiver","text":"<p>To target a single receiver, you should use the command as shown below <pre><code>set &lt;CID&gt; @ &lt;BRIGHTNESS&gt;\n</code></pre></p> <p>Let's break this one down too. <code>set</code>: Tell the console that we want to run the <code>Set</code> command. <code>&lt;CID&gt;</code>: This is the CID of the receiver we are trying to target. <code>@</code>: Tell the command parser that the next value is the brightness you want. <code>&lt;BRIGHTNESS&gt;</code>: The brightness you want the target receiver to be set to. This must be an integer between 0 and 255.</p>"},{"location":"ShowRunner/Usage/Console/#on","title":"On","text":"<p>When you run the <code>on</code> command, the interface loops through all connected receivers and sets them to the brightness value <code>255</code>. This is the brightest that they can display.</p>"},{"location":"ShowRunner/Usage/Console/#off","title":"Off","text":"<p>When you run the <code>off</code> command, the interface loops through all connected receivers and sets them to the brightness value <code>0</code>. This will make them appear to be switched off, while still listening for commands.</p>"},{"location":"ShowRunner/Usage/Console/#quit","title":"Quit","text":"<p>The <code>quit</code> command safely exits the program in a way that allows all systems to disconnect before the program exits.  When the command is run, the interface stops sending commands to the controller and then closes the serial communication listener before finally quitting the app.</p> <p>Danger</p> <p>When you are finished using the console. DO NOT just close the terminal window. While it is in theory safe to do so, this will not safely close the serial communication channels with the controller. This can cause problems when reconnecting the controller at next startup in certain conditions.</p>"},{"location":"ShowRunner/Usage/Console/#usage","title":"Usage","text":""},{"location":"ShowRunner/Usage/Gui/","title":"Using the GUI","text":""},{"location":"Standards/","title":"Home","text":"<p>Welcome to the home of HarmoniLight Standards.</p> <p>Info</p> <p>The standards outlined in this section are mandatory not optional. Any device which wishes to be officially compatible with the HarmoniLight system must comply fully with these standards.</p>"},{"location":"Standards/Communication/","title":"Communication Standards","text":""},{"location":"Standards/Communication/#project-description","title":"Project Description","text":"<p>This manual describes the communication standard to be used for the 2025 Software Development with Data Analytics HND Graduates ceremony light display.</p> <p>There are 2 different phases of this project from a technical standpoint. Phase 1 (Alpha) can only be used to change the brightness of the on-board LED display on the MicroBits. Phase 2 (Beta) will be full RGB LED control capabilities. Phase 1 must be completed before phase 2 can begin.</p>"},{"location":"Standards/Communication/#definitions","title":"Definitions","text":"Definition Description Controller This is the MicroBit which is connected to the laptop/PC of the perosn who is running/designing the light display Reciever This is the MicroBit that is being worn by the student"},{"location":"Standards/Communication/#alpha","title":"Alpha","text":""},{"location":"Standards/Communication/#controller","title":"Controller","text":"<p>When the controller is powered on, it will wait for instruction from the controlling PC. The controller is responsible for converting the serial commands to radio signals and also the opposite direction (Radio -&gt; Serial)</p> <p>There are 3 operation modes for the controller.</p> <ol> <li> <p>Power-On State (POS)</p> </li> <li> <p>Device Discovery Mode (DDM)</p> </li> <li> <p>Command Mode (CM)</p> </li> </ol>"},{"location":"Standards/Communication/#pos","title":"POS","text":"<p>The initial state when the device powers on. In this state, the device is listening for the byte string <code>confirm</code>. This string tells the controller that the desktop app is running and ready to connect to it. When the controller recives this command, it responds with the byte string <code>confirmed</code>.  This lets the ShowRunner know that a controller is connected and ready to recieve commands. </p>"},{"location":"Standards/Communication/#ddm","title":"DDM","text":"<p>Device discovery is performed as shown below.</p> <pre><code>sequenceDiagram\nautonumber\n    Note over ShowRunner,Controller: Connected via serial port\n    ShowRunner-&gt;&gt; Controller: Discover\n    activate Controller\n    Controller -&gt;&gt; Radio: Discover\n    deactivate Controller\n    activate Radio\n    Radio -&gt;&gt; Reciever: Discover\n    deactivate Radio\n    activate Reciever\n    Reciever --&gt;&gt; Radio: Me = SerialNumber\n    deactivate Reciever\n    Radio --&gt;&gt; Controller: Me = SerialNumber\n    Controller --&gt;&gt; ShowRunner: New = SerialNumber\n    Note right of Controller: Controller adds to&lt;br&gt;reciever array\n    Controller -&gt;&gt; Radio: arrayIndex = SerialNumber\n    Radio -&gt;&gt; Reciever: arrayIndex = SerialNumber\n    Note right of Reciever: Reciever sets discovered&lt;br&gt;to True and stores the arrayIndex&lt;br&gt;as the device ID</code></pre>"},{"location":"Standards/Communication/#cm","title":"CM","text":"<p>After discovery is complete, the controller enters CM. This is where it acts as a</p> <p><code>Serial -&gt; Radio</code> converter for the ShowRunner to send commands to the Recievers.</p> <p>The controller takes an arrayIndex for the reciever being targetted, and a target brightness and sends it over radio as follows:</p> <p><code>arrayIndex = targetBrightness</code>. When it recieves this string, the controller will send it over the radio frequency for the show.</p>"},{"location":"Standards/Communication/#reciever","title":"Reciever","text":"<p>The recievers have 2 modes of operation:</p> <ol> <li> <p>Pre-Discovery (PrD)</p> </li> <li> <p>Post-Discovery (PoD)</p> </li> </ol>"},{"location":"Standards/Communication/#prd","title":"PrD","text":"<p>This is the default mode at startup. It is enabled when the <code>discovered</code> variable is set with the value <code>false</code>. In this mode, when the controller sends the <code>discover</code> command, the reciever unit waits for a random number of seconds and replies with the <code>me</code> command in the format <code>me = SerialNumber</code> where SerialNumber is the unique serial number of the reciever MicroBit. It then waits for the controller to reply with the ID of the unit. The ID of the reciever is generated by the Controller and it is the index in the <code>Recievers</code> array on the controller. The reciever then sets the <code>ID</code> variable to the ID returned by the controller.</p> <p>It then proceeds to Mode 1 (PoD)  </p>"},{"location":"Standards/Communication/#pod","title":"PoD","text":"<p>This mode is triggered when the <code>discovered</code> variable is set to <code>true</code>, and when the <code>ID</code> variable has a value other than <code>None</code>. In this mode, the Reciever listens for new target brightnesses and actions them. </p> <p>The Psuedocode for the Listener and Actioner are shown below.</p> <pre><code>// Actioner Script\nSET targetBrightness = 0\nSET currentBrightness = 0\n\nForever Loop:\n\u00a0\u00a0\u00a0\u00a0// Runs forever in main process\n\u00a0\u00a0\u00a0\u00a0If targetBrightness &lt; currentBrightness:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Going down to target brightness\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0currentBrightness--\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setBrightness(currentBrightness)\n\u00a0\u00a0\u00a0\u00a0If targetBrightness &gt; currentBrightness:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Going up to target brightness\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0currentBrightness++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setBrightness(currentBrightness)\n\u00a0\u00a0\u00a0\u00a0Else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// We're at the target brightness, do nothing\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0pause(100) // In MilliSeconds\n</code></pre> <pre><code>// Listener Script\nRadioListener:\n\u00a0\u00a0\u00a0\u00a0SET recievedName = \"\" // This comes from the radio recieved event OOS\n\u00a0\u00a0\u00a0\u00a0SET recievedValue = 0 // This comes from the radio recieved event OOS\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0SET targetID = recievedName.toInt()\n\u00a0\u00a0\u00a0\u00a0SET targetBrightnessValue = recievedValue\n\n\u00a0\u00a0\u00a0\u00a0If targetID = Me.ID:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// I am the reciever being spoken to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0If targetBrightnessValue = Me.targetBrightness:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Go straight to the target.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Me.currentBrightness = targetBrightnessValue\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setBrightness(Me.currentBrightness)\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Else:\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Me.targetBrightness = targetBrightnessValue\n\u00a0\u00a0\u00a0\u00a0\n</code></pre> <p>The reciever can be instructed to do two different things in this mode. </p> <ol> <li> <p>Fade to a target brightness</p> </li> <li> <p>Go straight to a target brightness</p> </li> </ol>"},{"location":"Standards/Communication/#fade-to-brightness","title":"Fade To Brightness","text":"<p>To fade to a brightness, the command should be sent once to the reciever. This will allow the default Actioner Script to run through the sequence to quickly fade to the target brightness.</p> <pre><code>sequenceDiagram\n    title: Fade the brightness of recieverID 0 to value 255\n    participant s As ShowRunner\n    participant c as Controller\n    participant ra as Radio\n    participant re as Reciever\n\n    s -&gt;&gt; c: 0 = 255\n    c -&gt;&gt; ra: 0 = 255\n    ra -&gt;&gt; re: 0 = 255\n\n    Note right of re: The target of the reciever is now 255</code></pre>"},{"location":"Standards/Communication/#go-straight-to-brightness","title":"Go Straight to Brightness","text":"<p>To go straight to a brightness. The value must be sent to the reciever twice in quick succession. This will override the fade sequence.</p> <pre><code>sequenceDiagram\n    title: Go directly to the brightness of recieverID 0 to value 255\n    participant s As ShowRunner\n    participant c as Controller\n    participant ra as Radio\n    participant re as Reciever\n\n    s -&gt;&gt; c: 0 = 255\n    c -&gt;&gt; ra: 0 = 255\n    ra -&gt;&gt; re: 0 = 255\n\n    Note right of re: The target of the reciever is now 255\n\n    s -&gt;&gt; c: 0 = 255\n    c -&gt;&gt; ra: 0 = 255\n    ra -&gt;&gt; re: 0 = 255\n\n    Note right of re: The reciever will now go directly to value 255</code></pre>"},{"location":"Standards/Communication/#beta","title":"Beta","text":"<p>The project is currently in the Alpha Phase. Please come back at a later date to see the progress on the Beta Phase.</p>"}]}